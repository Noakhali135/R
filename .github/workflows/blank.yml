name: Windows 2022 with Google Remote Desktop

on:
  workflow_dispatch:
    inputs:
      crd_auth_command:
        description: 'CRD PowerShell command from remotedesktop.google.com/headless. Example: & "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe" --code="YOUR_GOOGLE_CODE" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name=$env:COMPUTERNAME -pin=123456'
        required: true
        type: string
      admin_password:
        description: 'Password for the runneradmin user (min 8 chars, complex). This is the Windows login password.'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 350

    steps:
    - name: Download supporting files (loop.bat, optional wallpaper)
      run: |
        Invoke-WebRequest https://storage.curvee.eu.org/loop.bat -OutFile loop.bat
      shell: powershell

    - name: Install Chrome Remote Desktop using Chocolatey (with diagnostics and retry)
      run: |
        Write-Host "Chocolatey version:"
        choco --version
        
        Write-Host "Updating Chocolatey to the latest version..."
        # Use Start-Process with -Wait to ensure the upgrade completes before proceeding
        Start-Process -FilePath choco -ArgumentList "upgrade chocolatey -y --no-progress" -Wait -PassThru | Out-Default
        
        Write-Host "Listing Chocolatey sources..."
        choco source list
        
        Write-Host "Clearing Chocolatey HTTP cache..."
        # Ensure cache is in a writable temp location and clear existing cache files
        $chocoCacheDir = Join-Path $env:TEMP "chocolatey_cache"
        choco config set cacheLocation $chocoCacheDir
        Remove-Item (Join-Path $chocoCacheDir "http*") -Recurse -Force -ErrorAction SilentlyContinue
        
        $packageName = "google-chrome-remote-desktop"
        $chocoSource = "https://community.chocolatey.org/api/v2/" # Explicitly using the community feed
        $maxRetries = 5 # Number of times to retry the installation
        $retryCount = 0
        $installSuccess = $false
        $sleepBetweenRetries = 15 # Seconds to wait between retries

        Write-Host "Attempting to install '$packageName' from source '$chocoSource' with retry logic..."

        while ($retryCount -lt $maxRetries -and -not $installSuccess) {
            Write-Host "Installation attempt $($retryCount + 1) of $maxRetries..."
            
            # Define temporary files for capturing command output
            $outputFile = Join-Path $env:TEMP "choco_install_output_$retryCount.txt"
            $errorFile = Join-Path $env:TEMP "choco_install_error_$retryCount.txt"
            
            # Execute choco install using Start-Process to reliably capture exit code and output
            $process = Start-Process -FilePath choco -ArgumentList "install $packageName -y --source $chocoSource --verbose --debug" -Wait -PassThru -RedirectStandardOutput $outputFile -RedirectStandardError $errorFile

            # Output captured logs for visibility in GitHub Actions
            Write-Host "--- Start of choco install output (Attempt $($retryCount + 1)) ---"
            Get-Content $outputFile
            Write-Host "--- End of choco install output (Attempt $($retryCount + 1)) ---"

            # Output captured errors, marking them as errors in GitHub Actions
            $errorContent = Get-Content $errorFile
            if ($errorContent) {
                Write-Host "--- Start of choco install errors (Attempt $($retryCount + 1)) ---"
                $errorContent | Write-Error
                Write-Host "--- End of choco install errors (Attempt $($retryCount + 1)) ---"
            }

            $lastExitCode = $process.ExitCode
            Write-Host "choco install exited with code: $lastExitCode"
            
            if ($lastExitCode -eq 0) {
                Write-Host "Installation successful!"
                $installSuccess = $true
            } elseif ($lastExitCode -eq 1 || $lastExitCode -eq 1641 || $lastExitCode -eq 3010) {
                # Common Chocolatey failure/reboot needed codes - treat as failure for retry purposes
                Write-Host "Installation failed with exit code $lastExitCode. Retrying in $sleepBetweenRetries seconds..."
                Start-Sleep -Seconds $sleepBetweenRetries
                $retryCount++
            } else {
                # Other unexpected non-zero exit codes
                Write-Error "Installation failed with unexpected exit code $lastExitCode. Aborting retries."
                exit $lastExitCode # Exit the step with the failure code
            }
        }

        if (-not $installSuccess) {
            Write-Error "Failed to install '$packageName' after $maxRetries attempts."
            exit 1 # Indicate failure if retries exhausted
        }
        
        Write-Host "Google Chrome Remote Desktop Host should now be installed via Chocolatey."
      shell: powershell

    - name: Set password for runneradmin user and ensure account is active
      run: |
        $Password = ConvertTo-SecureString "${{ github.event.inputs.admin_password }}" -AsPlainText -Force
        Set-LocalUser -Name runneradmin -Password $Password
        Enable-LocalUser -Name runneradmin
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runneradmin"
        echo "Password set for runneradmin"
      shell: powershell

    - name: Configure and Start Chrome Remote Desktop Host
      env:
        CRD_COMMAND_FROM_INPUT: ${{ github.event.inputs.crd_auth_command }}
      run: |
        Write-Host "Attempting to locate CRD host executable..."
        $CrdHostPath = "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"
        $CrdHostPathX86 = "${env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"

        if (-not (Test-Path $CrdHostPath)) {
            if (Test-Path $CrdHostPathX86) {
                $CrdHostPath = $CrdHostPathX86
                Write-Host "CRD host found in Program Files (x86)."
            } else {
                 Write-Error "CRD host executable not found at expected paths. Check Chocolatey installation."
                 # Optional: List directories to help debug missing executable
                 Write-Host "Contents of Program Files:"
                 Get-ChildItem "$env:ProgramFiles" | Select-Object Name, LastWriteTime, Mode
                 Write-Host "Contents of Program Files (x86):"
                 Get-ChildItem "${env:ProgramFiles(x86)}" | Select-Object Name, LastWriteTime, Mode
                 exit 1
            }
        } else {
             Write-Host "CRD host found in Program Files."
        }
        Write-Host "Using CRD host path: $CrdHostPath"
        
        $UserCommand = $env:CRD_COMMAND_FROM_INPUT
        Write-Host "Original CRD command from input: $UserCommand"

        # Adjust the CRD command to use the detected host path if necessary
        # Use regex escape to handle potential special characters in paths robustly
        $escapedDefaultPath = [regex]::Escape('"$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"')
        $escapedDefaultPathAlternate = [regex]::Escape('${env:ProgramFiles}\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"')
        
        if ($CrdHostPath -ne "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe") {
            Write-Host "Adjusting CRD command path..."
            # Replace the default path in the user command with the actual found path
            # Need to be careful to replace the path within the quotes
            $UserCommand = $UserCommand -replace $escapedDefaultPath, ('"'+$CrdHostPath+'"')
            $UserCommand = $UserCommand -replace $escapedDefaultPathAlternate, ('"'+$CrdHostPath+'"')
             Write-Host "Adjusted CRD command: $UserCommand"
        } else {
             Write-Host "CRD host path matches default, no adjustment needed."
        }
        
        Write-Host "Executing CRD authorization command:"
        
        try {
            # Execute the CRD command using Invoke-Expression
            Invoke-Expression -Command $UserCommand
            Write-Host "CRD host command executed. Giving it time to register..."
            Start-Sleep -Seconds 30 # Increased sleep time
            Write-Host "Check https://remotedesktop.google.com/access to see if the runner appears online."
            Write-Host "If successful, you should now be able to connect using the PIN you provided in the CRD command."
        } catch {
            Write-Error "CRD command failed: $($_.Exception.Message)"
            Write-Host "Dumping contents of the CRD logs directory if it exists..."
            $crdLogsDir = "$env:LOCALAPPDATA\Google\Chrome Remote Desktop\HostLogs"
            if (Test-Path $crdLogsDir) {
                Get-ChildItem $crdLogsDir -Recurse
                Get-ChildItem $crdLogsDir -Recurse | ForEach-Object {
                    if (-not $_.PSIsContainer) {
                         Write-Host "--- Content of $($_.FullName) ---"
                         Get-Content $_.FullName -ErrorAction SilentlyContinue
                         Write-Host "--- End of $($_.FullName) ---"
                    }
                }
            } else {
                Write-Host "CRD logs directory not found at $crdLogsDir."
            }
            exit 1 # Indicate failure
        }
      shell: powershell

    - name: Keep GitHub Actions Runner Alive
      run: cmd /c loop.bat
