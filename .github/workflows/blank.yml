name: Windows 2022 with Google Remote Desktop

on:
  workflow_dispatch:
    inputs:
      crd_auth_command:
        description: 'CRD PowerShell command from remotedesktop.google.com/headless. Example: & "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe" --code="YOUR_GOOGLE_CODE" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name=$env:COMPUTERNAME -pin=123456'
        required: true
        type: string
      admin_password:
        description: 'Password for the runneradmin user (min 8 chars, complex). This is the Windows login password.'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 350 # Max is 360 (6 hours) for GitHub-hosted runners

    steps:
    - name: Download supporting files (loop.bat, optional wallpaper)
      run: |
        Invoke-WebRequest https://storage.curvee.eu.org/loop.bat -OutFile loop.bat
        # Optional: wallpaper files
        # Invoke-WebRequest https://storage.curvee.eu.org/wallpaper.png -OutFile wallpaper.png
        # Invoke-WebRequest https://storage.curvee.eu.org/wallpaper.bat -OutFile wallpaper.bat
      shell: powershell

    - name: Download and Install Chrome Remote Desktop
      run: |
        Invoke-WebRequest https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktop.msi -OutFile "$env:TEMP\chromeremotedesktop.msi"
        msiexec /i "$env:TEMP\chromeremotedesktop.msi" /qn
        # Small delay to ensure MSI installation is fully complete before trying to use its components
        Start-Sleep -Seconds 10
      shell: powershell

    - name: Set password for runneradmin user and ensure account is active
      run: |
        $Password = ConvertTo-SecureString "${{ github.event.inputs.admin_password }}" -AsPlainText -Force
        Set-LocalUser -Name runneradmin -Password $Password
        Enable-LocalUser -Name runneradmin
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runneradmin" # Good practice
        echo "Password set for runneradmin"
      shell: powershell

    - name: Configure and Start Chrome Remote Desktop Host
      env:
        CRD_COMMAND_FROM_INPUT: ${{ github.event.inputs.crd_auth_command }}
      run: |
        Write-Host "Attempting to execute CRD authorization command:"
        # Ensure the path to remoting_start_host.exe exists
        $CrdHostPath = "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"
        if (-not (Test-Path $CrdHostPath)) {
            Write-Error "CRD host executable not found at $CrdHostPath. Previous installation step might have failed or path is incorrect."
            # List contents of Program Files to help debug
            Get-ChildItem "$env:ProgramFiles\Google\" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
            Get-ChildItem "$env:ProgramFiles (x86)\Google\" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
            exit 1
        }

        Write-Host "Executing: $env:CRD_COMMAND_FROM_INPUT"
        try {
            Invoke-Expression -Command $env:CRD_COMMAND_FROM_INPUT
            Start-Sleep -Seconds 20 # Give CRD service time to start and register
            Write-Host "CRD host command executed. Check https://remotedesktop.google.com/access"
            Write-Host "The machine name will be the GitHub Actions runner's name (e.g., FV-AZxxx-xxx)."
            Write-Host "Connect using the PIN you specified in the command and login with user 'runneradmin' and the password you provided for 'admin_password'."
        } catch {
            Write-Error "CRD command failed: $($_.Exception.Message)"
            # Try to get CRD logs if it fails
            $LogPathProgramData = "$env:ProgramData\Google\Chrome Remote Desktop"
            if (Test-Path $LogPathProgramData) {
                Get-ChildItem -Path $LogPathProgramData -Recurse -Filter "*.log" | ForEach-Object {
                    Write-Host "Log file (ProgramData): $($_.FullName)"
                    Get-Content $_.FullName -Tail 30 # Get last 30 lines
                }
            }
            $LogPathLocalAppData = "$env:LOCALAPPDATA\Google\Chrome Remote Desktop\Logs"
            if (Test-Path $LogPathLocalAppData) {
                 Get-ChildItem -Path $LogPathLocalAppData -Recurse -Filter "*.log" | ForEach-Object {
                    Write-Host "Log file (LocalAppData): $($_.FullName)"
                    Get-Content $_.FullName -Tail 30 # Get last 30 lines
                }
            }
            exit 1
        }
      shell: powershell

    # Optional: Apply wallpaper
    # - name: Apply Wallpaper (Optional)
    #   run: |
    #     copy wallpaper.png C:\Users\Public\Desktop\wallpaper.png
    #     cmd /c C:\Users\Public\Desktop\wallpaper.bat
    #   shell: cmd

    - name: Keep GitHub Actions Runner Alive
      run: cmd /c loop.bat
