name: Windows 2022 with Google Remote Desktop

on:
  workflow_dispatch:
    inputs:
      crd_auth_command:
        description: 'CRD PowerShell command from remotedesktop.google.com/headless. Example: & "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe" --code="YOUR_GOOGLE_CODE" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name=$env:COMPUTERNAME -pin=123456'
        required: true
        type: string
      admin_password:
        description: 'Password for the runneradmin user (min 8 chars, complex). This is the Windows login password.'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 350 # Max is 360 (6 hours) for GitHub-hosted runners

    steps:
    - name: Download supporting files (loop.bat, optional wallpaper)
      run: |
        Invoke-WebRequest https://storage.curvee.eu.org/loop.bat -OutFile loop.bat
        # Optional: wallpaper files
        # Invoke-WebRequest https://storage.curvee.eu.org/wallpaper.png -OutFile wallpaper.png
        # Invoke-WebRequest https://storage.curvee.eu.org/wallpaper.bat -OutFile wallpaper.bat
      shell: powershell

    - name: Download and Install Chrome Remote Desktop
      run: |
        $msiUrl = "https://dl.google.com/dl/edgedl/chrome-remote-desktop/chromeremotedesktop.msi"
        $outputFile = "$env:TEMP\chromeremotedesktop.msi"
        
        Write-Host "Attempting to download Chrome Remote Desktop MSI using curl..."
        Write-Host "URL: $msiUrl"
        Write-Host "Output File: $outputFile"
        
        try {
            # Use curl.exe to download. -L follows redirects. -o specifies output file.
            # --fail makes curl exit with an error on HTTP server errors (4xx, 5xx).
            # --show-error displays the error from the server.
            # We'll also add -S to show errors but not progress meter for cleaner logs unless an error occurs.
            curl.exe -L -S --fail --show-error -o $outputFile $msiUrl
            
            if (-not (Test-Path $outputFile)) {
                Write-Error "curl download failed: Output file not found at $outputFile"
                exit 1
            }
            if ((Get-Item $outputFile).Length -lt 1000000) { # CRD MSI is usually >20MB
                Write-Error "curl download failed: Output file is too small or empty. Size: $((Get-Item $outputFile).Length) bytes."
                Write-Host "Attempting to display content of small downloaded file (might be an error page):"
                Get-Content $outputFile -TotalCount 20 -ErrorAction SilentlyContinue # Display first 20 lines
                exit 1
            }
            Write-Host "MSI downloaded successfully using curl. Size: $((Get-Item $outputFile).Length) bytes."
        } catch {
            Write-Error "curl command or subsequent check failed: $($_.Exception.Message)"
            # If curl wrote an error to the output file path (e.g. HTML error page if --fail wasn't perfect)
            if (Test-Path $outputFile) {
                Write-Host "Content of the output file (may contain error details from server if --fail didn't catch it):"
                Get-Content $outputFile -TotalCount 20 -ErrorAction SilentlyContinue
            }
            exit 1
        }
        
        Write-Host "MSI downloaded. Installing..."
        msiexec /i $outputFile /qn
        Write-Host "Installation command executed. Waiting for completion..."
        Start-Sleep -Seconds 15 # Give MSI time to fully install
        Write-Host "Chrome Remote Desktop Host should now be installed."
      shell: powershell

    - name: Set password for runneradmin user and ensure account is active
      run: |
        $Password = ConvertTo-SecureString "${{ github.event.inputs.admin_password }}" -AsPlainText -Force
        Set-LocalUser -Name runneradmin -Password $Password
        Enable-LocalUser -Name runneradmin
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runneradmin"
        echo "Password set for runneradmin"
      shell: powershell

    - name: Configure and Start Chrome Remote Desktop Host
      env:
        CRD_COMMAND_FROM_INPUT: ${{ github.event.inputs.crd_auth_command }}
      run: |
        Write-Host "Attempting to execute CRD authorization command:"
        $CrdHostPath = "$env:ProgramFiles\Google\Chrome Remote Desktop\current_version\remoting_start_host.exe"
        if (-not (Test-Path $CrdHostPath)) {
            Write-Error "CRD host executable not found at $CrdHostPath. Installation might have failed or path is incorrect."
            Write-Host "Listing contents of Google directories in Program Files to help debug installation:"
            if (Test-Path "$env:ProgramFiles\Google\") { Get-ChildItem "$env:ProgramFiles\Google\" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName } else { Write-Host "$env:ProgramFiles\Google\ not found."}
            if (Test-Path "$env:ProgramFiles (x86)\Google\") { Get-ChildItem "$env:ProgramFiles (x86)\Google\" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName } else { Write-Host "$env:ProgramFiles (x86)\Google\ not found."}
            exit 1
        }

        Write-Host "Executing: $env:CRD_COMMAND_FROM_INPUT"
        try {
            Invoke-Expression -Command $env:CRD_COMMAND_FROM_INPUT
            Start-Sleep -Seconds 20
            Write-Host "CRD host command executed. Check https://remotedesktop.google.com/access"
            # ... (rest of messages)
        } catch {
            Write-Error "CRD command failed: $($_.Exception.Message)"
            # ... (log dumping logic)
            exit 1
        }
      shell: powershell

    - name: Keep GitHub Actions Runner Alive
      run: cmd /c loop.bat
